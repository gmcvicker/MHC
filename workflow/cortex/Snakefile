import os

configfile: "config.json"



if not os.path.exists(config['cortex']['output_dir']):
    os.makedirs(config['cortex']['output_dir'])



IMGT_LOCUS, IMGT_ALLELE = glob_wildcards(config['imgt_gseq_dir'] + "{locus}/{allele}.fasta")
    
for l, a in zip(IMGT_LOCUS, IMGT_ALLELE):
    sys.stderr.write("%s %s\n" % (l, a))


rule all:
     input:
        expand(config['cortex']['path'] + "/bin/cortex_var_" + \
               str(config['cortex']['max_k']) + "_c{n_colors}",
               n_colors=[str(x) for x in range(1, config['cortex']['max_colors']+1)]),
        expand(config['cortex']['output_dir'] + "/{locus}_{allele}.ctx",
               zip, locus=IMGT_LOCUS, allele=IMGT_ALLELE)
        

        
rule trim_reads:
    input:
        config['mhc_dir'] + "{prefix}_R1_001.fastq.gz",
        config['mhc_dir'] + "{prefix}_R2_001.fastq.gz",
    output:
        config['mhc_dir'] + "trim/{prefix}_R1_001_val_1.fq.gz",
        config['mhc_dir'] + "trim/{prefix}_R2_001_val_2.fq.gz"
    run:
        if not os.path.exists(config['mhc_dir'] + "trim"):
            os.makedirs(config['mhc_dir'] + "trim")
        shell("trim_galore --length 32"
              "  --output_dir {trim_dir} "
              "  --clip_R1 20 "
              "  --clip_R2 20 "
              "  --paired "
              "  --trim1 "
              "  --quality 30 {{input}}".format(trim_dir=config['mhc_dir'] + "trim"))


        
rule build_cortex:
    """compiles cortex and with appropriate number of colors for each gene"""
    output:
        config['cortex']['path'] + "/bin/cortex_var_" +
               str(config['cortex']['max_k']) + "_c{n_colors}"
    shell:
        "cd " + config['cortex']['path'] + ";"
        "make MAXK=" + str(config['cortex']['max_k']) + 
               " NUM_COLS={wildcards.n_colors} cortex_var;"



rule make_cortex_color_binaries:
    """make a single color binary for each IMGT fasta file"""
    input:
        # for this task use the cortex binary that is compiled for 1 color
        cortex=config['cortex']['path'] + "/bin/cortex_var_" + \
                      str(config['cortex']['max_k']) + "_c1",
        fasta=config['imgt_gseq_dir'] + "{locus}/{allele}.fasta"
    output:
        ctx=config['cortex']['output_dir'] + "{locus}_{allele}.ctx",
        se_list=temp(config['cortex']['output_dir'] + "{locus}_{allele}.se_list.txt")
    shell:
        "echo '{input.fasta}' > '{output.se_list}'; "
        "{input.cortex} --se_list '{output.se_list}' "
        "--mem_height 20 "
        "--mem_width 100 "
        "--kmer_size " + str(config['cortex']['kmer_size']) + " " +
        "--dump_binary '{output.ctx}' " + 
        "--sample_id '{wildcards.allele}'"
    
    

    
        
        

